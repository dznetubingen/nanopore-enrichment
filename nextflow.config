// Global default params, used in configs
params {
  // Pipeline version
  //version = '0.3.2dev'

  // Minimum version of nextflow required
  nf_required_version = '0.27.0'

  help = false
  outdir = '.'
  //version = version
  nf_required_version = nf_required_version
  container = 'tristankast/cas_pipeline:latest'

  params.reads = "*.fastq"
  params.ref = "*.fasta"

  params.gstride = 80
  params.offtarget_level = 40
  params.target_proximity = 5000

}

profiles {
  standard {
    includeConfig 'conf/base.config'
    includeConfig 'conf/docker.config'
  }

  galaxy {
    includeConfig 'conf/base.config'
    includeConfig 'conf/docker.config'
    includeConfig 'conf/galaxy.config'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/dag.html"
}

manifest {
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  }  else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
